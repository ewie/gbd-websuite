import * as React from 'react';

import {UiPureComponent, UiProps} from './base';
import * as tools from '../tools';


/**
 * Row properties
 */
export interface RowProps extends UiProps {
    /** the row is top-aligned */
    top?: boolean;
    /** the row is bottom-aligned */
    bottom?: boolean;
    /** the last row - no bottom padding */
    last?: boolean;
    /** className */
    className?: string;
}

/**
 * Cell properties
 */
export interface CellProps extends UiProps {
    /** the cell is flexible */
    flex?: boolean;
    /** the cell is center-aligned (implies flex) */
    center?: boolean;
    /** the cell is right-aligned (implies flex) */
    right?: boolean;
    /** fixed cell width (min-width for flex cells) */
    width?: number;
    /** className */
    className?: string;
}

let children = props => React.Children.map(props.children, (c, n) =>
    <React.Fragment key={n}>{c}</React.Fragment>);

export class Row extends UiPureComponent<RowProps> {
    protected style() {
        let s: any = {};

        if (this.props.top)
            s.alignItems = 'flex-start';

        if (this.props.bottom)
            s.alignItems = 'flex-end';

        return s;
    }


    render() {
        return <div
            {...tools.cls('uiRow', this.props.last && 'isLast', this.props.className)}
            style={this.style()}
        >{children(this.props)}
        </div>
    }
}

export class Cell extends UiPureComponent<CellProps> {
    protected style() {
        let s: any = {};

        if (this.props.flex === true)
            s.flex = '1 1 auto';
        else if (this.props.flex)
            s.flex = this.props.flex;
        else if (this.props.width)
            s.width = this.props.width;

        if (this.props.center) {
            s.flex = s.flex || '1 1 auto';
            s.textAlign = 'center';
        }

        if (this.props.right) {
            s.flex = s.flex || '1 1 auto';
            s.textAlign = 'right';
        }

        return s;
    }


    render() {
        return <div
            {...tools.cls('uiCell', this.props.className)}
            style={this.style()}
        >{children(this.props)}</div>
    }
}


export class Divider extends UiPureComponent<UiProps> {
    render() {
        return <div className='uiDivider'>
            <div className='uiDividerInner'/>
        </div>
    }
}

export class Form extends UiPureComponent<{}> {
    render() {
        return <div className="uiForm">{this.props.children}</div>;
    }
}


export const Layout = { Form, Row, Cell, Divider };
