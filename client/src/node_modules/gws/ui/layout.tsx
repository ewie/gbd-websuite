import * as React from 'react';

import * as base from './base';
import * as util from './util';


export interface RowProps {
    top?: boolean;
    bottom?: boolean;
    last?: boolean;
    className?: string;
}

export class Row extends base.Pure<RowProps> {
    protected style() {
        let s: any = {};

        if (this.props.top)
            s.alignItems = 'flex-start';

        if (this.props.bottom)
            s.alignItems = 'flex-end';

        return s;
    }


    render() {
        return <div
            className={util.className('uiRow', this.props.last && 'isLast', this.props.className)}
            style={this.style()}
        >{children(this.props)}
        </div>
    }
}

//

export interface CellProps {
    flex?: boolean;
    center?: boolean;
    right?: boolean;
    width?: number;
    className?: string;
}


export class Cell extends base.Pure<CellProps> {
    protected style() {
        let s: any = {};

        if (this.props.flex === true)
            s.flex = '1 1 auto';
        else if (this.props.flex)
            s.flex = this.props.flex;
        else if (this.props.width)
            s.width = this.props.width;

        if (this.props.center) {
            s.flex = s.flex || '1 1 auto';
            s.textAlign = 'center';
        }

        if (this.props.right) {
            s.flex = s.flex || '1 1 auto';
            s.textAlign = 'right';
        }

        return s;
    }


    render() {
        return <div
            className={util.className('uiCell', this.props.className)}
            style={this.style()}
        >{children(this.props)}</div>
    }
}

//

export class Divider extends base.Pure {
    render() {
        return <div className='uiDivider'>
            <div className='uiDividerInner'/>
        </div>
    }
}

//

export class Form extends base.Pure {
    render() {
        return <div className="uiForm">{this.props.children}</div>;
    }
}

//

export const Layout = {Form, Row, Cell, Divider};

//

let children = props => React.Children.map(props.children, (c, n) =>
    <React.Fragment key={n}>{c}</React.Fragment>);

