import * as React from 'react';

import {UiComponent, UiState, UiProps, UiPureComponent} from './base';
import * as tools from '../tools';

/**
 * Generic button properties.
 *
 */
interface TouchableProps extends UiProps {
    /** pressed/touched handler */
    whenTouched?: () => any;
}

interface ButtonProps extends TouchableProps {
    /** tooltip text */
    tooltip?: string;
    /** html class name */
    className?: string;
    /** no tab to this button */
    noTab?: boolean;
    /** the button is primary */
    primary?: boolean,
    /** a badge for the button */
    badge?: string;
    disabled?: boolean;
    elementRef?: (div: HTMLDivElement) => void;
}

export class Touchable extends UiPureComponent<TouchableProps> {
    render() {
        return <div onClick={this.props.whenTouched}>{this.props.children}</div>;
    }
}

/**
 * Generic button.
 *
 */
export class Button extends UiComponent<ButtonProps, UiState> {
    defaultClass = '';

    render() {
        return <div
            {...tools.cls(
                this.defaultClass,
                this.props.className,
                this.props.primary && 'isPrimary',
                this.props.disabled && 'isDisabled',
                this.state.hasFocus && 'hasFocus',
                this.props.badge && 'hasBadge',
            )}
            ref={this.props.elementRef}
        >
            {this.button()}
            {this.props.badge && <span className='uiButtonBadge'>{this.props.badge}</span>}
        </div>;
    }

    protected button() {
        let props: any = {
            className: 'uiRawButton',
            tabIndex: this.props.noTab ? -1 : 0,
            title: this.props.tooltip || '',
        };

        if (!this.props.disabled) {
            props.onClick = this.props.whenTouched;
            props = {...props, ...this.focusEvents()};
        }

        return <button {...props}>{this.props.children}</button>;
    }

}

export class IconButton extends Button {
    defaultClass = 'uiIconButton';
}

export class TextButton extends Button {
    defaultClass = 'uiTextButton';
}

interface DotsProps {
    count: number;
    selectedIndex: number;
    whenChanged: (value: number) => void;
}

export class Dots extends UiComponent<DotsProps, UiState> {
    render() {
        let sel = this.props.selectedIndex || 0;
        return <div className="uiDots">
            {tools.range(0, this.props.count).map(n =>
                n === sel
                    ? <Button key={n} className='uiDot isActive'/>
                    : <Button key={n} className='uiDot' whenTouched={() => this.props.whenChanged(n)}/>
            )}
        </div>
    }

}
