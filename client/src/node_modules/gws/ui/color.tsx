import * as React from 'react';

import * as tinycolor from 'tinycolor2'

import {UiComponent, UiState, UiProps} from './base';
import {Button} from './buttons';
import {Slider, TrackingSurface} from './slider';
import {Form, Row, Cell} from './layout';

import * as tools from '../tools';

interface ColorPickerProps extends UiProps {
    value: string;
    tooltip?: string;
    placeholder?: string;
    label?: string;
    whenChanged?: any;
    up?: boolean;
}

interface ColorPickerState extends UiState {
    isOpen: boolean;
    freeValue: string;
}

export class ColorPicker extends UiComponent<ColorPickerProps, ColorPickerState> {
    rootRef: React.RefObject<HTMLDivElement>;

    constructor(props) {
        super(props);
        this.rootRef = React.createRef();
        this.state = {isOpen: false, freeValue: ''} as ColorPickerState;
    }

    render() {
        let clr = tinycolor(this.props.value);

        let rootProps = {
            ref: this.rootRef,
            ...tools.cls(
                'uiColorPicker',
                this.state.hasFocus && 'hasFocus',
                this.state.isOpen && 'isOpen',
                this.props.up && 'isUp',
            ),
            ...this.focusEvents()
        };

        let popupChanged = (rgba) => {
            this.props.whenChanged(tinycolor(rgba).toRgbString());
        };

        let buttonProps = {
            tabIndex: 0,
            className: 'uiColorPickerToggleButton',
            onClick: () => this.setOpen(!this.state.isOpen)
        };

        return <div {...rootProps}>
            {this.props.label && <div className="uiLabel">{this.props.label}</div>}

            <div className="uiColorPickerContainer">
                <div className="uiControlBox">
                    <button {...buttonProps}>
                        <div style={{backgroundColor: clr.toRgbString()}}/>
                    </button>
                    <Button
                        noTab
                        className="uiSelectToggleButton"
                        whenTouched={() => this.onToggleClick()}/>

                </div>
                <ColorPickerPopup
                    rgba={clr.toRgb()}
                    whenChanged={popupChanged}
                />
            </div>
        </div>
    }

    protected onToggleClick() {
        this.setOpen(!this.state.isOpen);
    }

    protected lostFocus() {
        super.lostFocus();
        this.setState({isOpen: false});
    }

    protected setOpen(v) {
        this.setState({isOpen: v});
    }

}

interface RGBA {
    r: number;
    g: number;
    b: number;
    a: number;
}


interface ColorPickerPopupProps {
    rgba: RGBA;
    whenChanged: (rgba: RGBA) => void;
}


class ColorPickerPopup extends React.PureComponent<ColorPickerPopupProps> {
    rRef: React.RefObject<HTMLDivElement>;
    gRef: React.RefObject<HTMLDivElement>;
    bRef: React.RefObject<HTMLDivElement>;
    aRef: React.RefObject<HTMLDivElement>;

    constructor(props) {
        super(props);
        this.rRef = React.createRef();
        this.gRef = React.createRef();
        this.bRef = React.createRef();
        this.aRef = React.createRef();
    }

    render() {
        return <div className='uiColorPickerPopup'>
            <div className='uiColorPickerPopupBox'>
                <Form>
                    <Row>
                        <Cell flex>
                            <div className="uiColorPickerBar" ref={this.rRef}>
                                <canvas/>
                                <TrackingSurface
                                    xValueMin={0}
                                    xValueMax={255}
                                    yValueMin={0}
                                    yValueMax={0}
                                    xValue={this.props.rgba.r}
                                    yValue={0}
                                    whenChanged={(x, y) => this.props.whenChanged({...this.props.rgba, r: x})}
                                />
                            </div>
                        </Cell>
                    </Row>
                    <Row>
                        <Cell flex>
                            <div className="uiColorPickerBar" ref={this.gRef}>
                                <canvas/>
                                <TrackingSurface
                                    xValueMin={0}
                                    xValueMax={255}
                                    yValueMin={0}
                                    yValueMax={0}
                                    xValue={this.props.rgba.g}
                                    yValue={0}
                                    whenChanged={(x, y) => this.props.whenChanged({...this.props.rgba, g: x})}
                                />
                            </div>
                        </Cell>
                    </Row>
                    <Row>
                        <Cell flex>
                            <div className="uiColorPickerBar" ref={this.bRef}>
                                <canvas/>
                                <TrackingSurface
                                    xValueMin={0}
                                    xValueMax={255}
                                    yValueMin={0}
                                    yValueMax={0}
                                    xValue={this.props.rgba.b}
                                    yValue={0}
                                    whenChanged={(x, y) => this.props.whenChanged({...this.props.rgba, b: x})}
                                />
                            </div>
                        </Cell>
                    </Row>
                    <Row>
                        <Cell flex>
                            <div className="uiColorPickerBar uiColorPickerBarA" ref={this.aRef}>
                                <canvas/>
                                <TrackingSurface
                                    xValueMin={0}
                                    xValueMax={1}
                                    yValueMin={0}
                                    yValueMax={0}
                                    xValue={this.props.rgba.a}
                                    yValue={0}
                                    whenChanged={(x, y) => this.props.whenChanged({...this.props.rgba, a: x})}
                                />
                            </div>
                        </Cell>
                    </Row>
                </Form>


            </div>
        </div>
    }

    componentDidMount() {
        this.draw();
    }

    componentDidUpdate() {
        this.draw();
    }

    protected draw() {
        this.drawBar(
            this.rRef,
            `rgb(000, ${this.props.rgba.g}, ${this.props.rgba.b})`,
            `rgb(255, ${this.props.rgba.g}, ${this.props.rgba.b})`);
        this.drawBar(
            this.gRef,
            `rgb(${this.props.rgba.r}, 000, ${this.props.rgba.b})`,
            `rgb(${this.props.rgba.r}, 255, ${this.props.rgba.b})`);
        this.drawBar(
            this.bRef,
            `rgb(${this.props.rgba.r}, ${this.props.rgba.g}, 000)`,
            `rgb(${this.props.rgba.r}, ${this.props.rgba.g}, 255)`);
        this.drawBar(
            this.aRef,
            `rgb(${this.props.rgba.r}, ${this.props.rgba.g}, ${this.props.rgba.b}, 0)`,
            `rgb(${this.props.rgba.r}, ${this.props.rgba.g}, ${this.props.rgba.b}, 1)`);

    }

    protected drawBar(ref, g1, g2) {
        let
            cnv = ref.current.querySelector('canvas'),
            w = cnv.width = cnv.offsetWidth,
            h = cnv.height = cnv.offsetHeight,
            ctx = cnv.getContext('2d');

        let g = ctx.createLinearGradient(0, 0, w, 0);
        g.addColorStop(0, g1);
        g.addColorStop(1, g2);

        ctx.fillStyle = g;
        ctx.fillRect(0, 0, w, h);

    }
}
