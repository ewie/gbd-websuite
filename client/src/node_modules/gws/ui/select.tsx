import * as React from 'react';

import * as base from './base';
import * as util from './util';

import {Touchable} from './button';


export interface MenuItem {
    text: string;
    value: any;
    level?: number;
}

export interface SelectProps extends base.InputProps<string> {
    items: Array<MenuItem>;
    withSearch?: boolean;
    withCombo?: boolean;
    withClear?: boolean;
}


interface SelectState extends base.ControlState {
    freeValue: string;
}


export class Select extends base.Control<SelectProps, SelectState> {
    constructor(props) {
        super(props);
        this.state.freeValue = '';
    }

    render() {
        let
            currentValue = this.textFor(this.props.value),
            inputProps,
            items;

        if (this.props.withSearch) {
            inputProps = {
                value: this.state.hasFocus ? this.state.freeValue : currentValue,
                onKeyDown: e => this.onInputKeyDown(e),
                onChange: e => this.onInputChange(e),
            };

            items = this.filterItems(this.state.freeValue);

        } else if (this.props.withCombo) {
            inputProps = {
                value: this.state.freeValue || currentValue || this.props.value,
                onKeyDown: e => this.onInputKeyDown(e),
                onChange: e => this.onInputChange(e),

            };

            items = this.filterItems(this.state.freeValue);

        } else {
            inputProps = {
                value: currentValue,
                readOnly: true
            };

            items = this.props.items;
        }

        if (util.empty(items)) {
            items = [{text: '', value: null}];
        }

        inputProps = {
            ...inputProps,
            disabled: this.props.disabled,
            className: 'uiRawInput',
            tabIndex: 0,
            ref: this.focusRef,
            title: this.props.tooltip || '',
            placeholder: this.props.placeholder || '',
            autoComplete: 'off',
            onClick: e => this.onInputClick(e),
        };

        return <base.Content of={this} withClass="uiSelect">
            <base.Box>
                <input {...inputProps}/>

                {this.props.withClear && <Touchable
                    className={'uiInputClearButton' + (util.empty(currentValue) ? ' isHidden' : '')}
                    whenTouched={e => this.onClearClick(e)}/>
                }

                <Touchable
                    className="uiDropDownToggleButton"
                    whenTouched={e => this.onToggleClick(e)}/>

            </base.Box>

            <base.DropDown>
                <Menu
                    value={this.props.value}
                    items={items}
                    whenSelected={val => this.whenMenuSelected(val)}
                />
            </base.DropDown>
        </base.Content>
    }

    //

    protected onInputChange(e: React.SyntheticEvent<HTMLInputElement>) {
        let value = e.currentTarget.value;
        this.setState(({freeValue: value, isOpen: true}));
        if (this.props.withCombo && this.props.whenChanged)
            this.props.whenChanged(value);

    }

    protected onInputClick(e) {
        this.setOpen(true);
    }

    protected onInputKeyDown(e) {
    }


    protected onClearClick(e) {
        this.grabFocus();
        this.setState({freeValue: ''});
        this.setChanged('');
    }

    protected onToggleClick(e) {
        this.grabFocus();
        this.toggleOpen();
    }

    protected whenMenuSelected(val) {
        this.grabFocus();
        this.setOpen(false);
        this.setState({freeValue: this.textFor(val)});
        this.setChanged(val);
    }

    //

    protected setChanged(val) {
        if (this.props.whenChanged)
            this.props.whenChanged(val);
    }

    protected filterItems(value) {
        return this.props.items.filter(it =>
            it.text.toLowerCase().startsWith(value.toLowerCase())
        );
    }

    protected gotFocus() {
        super.gotFocus();
        if (!this.props.withCombo)
            this.setState({freeValue: ''});
    }

    protected lostFocus() {
        super.lostFocus();
        if (!this.props.withCombo)
            this.setState({freeValue: ''});
    }

    protected textFor(value) {
        for (let p of this.props.items) {
            if (p.value === value)
                return p.text;
        }
        return '';
    }
}


//

interface MenuProps {
    value: string;
    items: Array<MenuItem>;
    whenSelected: (value: string) => void;
}

class Menu extends React.PureComponent<MenuProps> {
    render() {
        return <div className='uiMenu'>
            <div className='uiMenuBox'>
                {this.props.items.map(p =>
                    <div
                        className={util.className('uiMenuItem', p.level && 'uiMenuItemLevel' + p.level)}
                        key={p.value}
                        onClick={e => this.props.whenSelected(p.value)}
                    >{p.text}</div>
                )}
            </div>
        </div>
    }
}
