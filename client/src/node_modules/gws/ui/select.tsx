import * as React from 'react';

import {UiComponent, UiState, UiProps} from './base';
import {Button} from './buttons';
import * as tools from '../tools';

export interface MenuItem {
    text: string;
    value: any;
    level?: number;
}

export interface SelectProps extends UiProps {
    value: string;
    items: Array<MenuItem>;
    tooltip?: string;
    placeholder?: string;
    label?: string;
    whenChanged?: any;
    withSearch?: boolean;
    withCombo?: boolean;
    withClear?: boolean;
    up?: boolean;
}

export interface ColorSelectProps extends UiProps {
    value: string;
    items: Array<string>;
    tooltip?: string;
    placeholder?: string;
    label?: string;
    whenChanged?: any;
    withClear?: boolean;
    up?: boolean;
}

export interface MenuProps extends UiProps {
    value: string;
    items: Array<MenuItem>;
    whenSelected: any;
}

export interface ColorMenuProps extends UiProps {
    value: string;
    items: Array<string>;
    whenSelected: any;
}

interface SelectState extends UiState {
    isOpen: boolean;
    freeValue: string;
}

class Menu extends React.PureComponent<MenuProps> {
    render() {
        return <div className='uiMenu'>
            <div className='uiMenuBox'>
                {this.props.items.map(p =>
                    <div
                        {...tools.cls('uiMenuItem', p.level && 'uiMenuItemLevel' + p.level)}
                        key={p.value}
                        onClick={e => this.props.whenSelected(p.value)}
                        >{p.text}
                    </div>
                )}
            </div>
        </div>
    }
}

class ColorMenu extends React.PureComponent<ColorMenuProps> {
    render() {
        return <div className='uiMenu'>
            <div className='uiMenuBox'>
                {this.props.items.map(p =>
                    <div
                        className='uiColorMenuItem'
                        style={{backgroundColor: p}}
                        key={p}
                        onClick={e => this.props.whenSelected(p)}
                    />
                )}
            </div>
        </div>
    }
}

export class Select extends UiComponent<SelectProps, SelectState> {

    inputRef: React.RefObject<any>;
    rootRef: React.RefObject<HTMLDivElement>;

    constructor(props) {
        super(props);
        this.inputRef = React.createRef();
        this.rootRef = React.createRef();
        this.state = {isOpen: false, freeValue: ''} as SelectState;
    }

    render() {
        let props = {
            className: 'uiRawInput',
            tabIndex: 0,
            ref: this.inputRef,
            title: this.props.tooltip || '',
            placeholder: this.props.placeholder || '',
            onClick: e => this.onClick(e),
            ...this.focusEvents()
        };

        let elem;
        let currentValue = this.textFor(this.props.value);

        if (this.props.withSearch) {
            elem = <input
                {...props}
                value={this.state.hasFocus ? this.state.freeValue : currentValue}
                onKeyDown={e => this.onKeyDown(e)}
                onChange={e => this.onChange(e)}
            />
        } else if (this.props.withCombo) {
            elem = <input
                {...props}
                value={this.state.freeValue || currentValue || this.props.value}
                onKeyDown={e => this.onKeyDown(e)}
                onChange={e => this.onChange(e)}
            />
        } else {
            elem = <input
                {...props}
                value={currentValue}
                readOnly
            />
        }

        let items = (this.props.withSearch || this.props.withCombo)
            ? this.filterItems(this.state.freeValue)
            : this.props.items;

        if (tools.empty(items)) {
            items = [{text: '', value: null}];
        }

        return <div
            ref={this.rootRef}

            {...tools.cls(
                'uiSelect',
                this.state.hasFocus && 'hasFocus',
                this.state.isOpen && 'isOpen',
                this.props.up && 'isUp',
            )}>

            {this.props.label && <div className="uiLabel">{this.props.label}</div>}

            <div className="uiSelectContainer">
                <div className="uiControlBox">
                    {elem}

                    {this.props.withClear && <Button
                        noTab
                        className={'uiInputClearButton' + (tools.empty(currentValue) ? ' isHidden' : '')}
                        whenTouched={() => this.onClearClick()}/>
                    }

                    <Button
                        noTab
                        className="uiSelectToggleButton"
                        whenTouched={() => this.onToggleClick()}/>
                </div>

                <Menu
                    value={this.props.value}
                    items={items}
                    whenSelected={value => this.valueSelected(value)}
                />
            </div>
        </div>
    }

    filterItems(value) {
        return this.props.items.filter(it =>
            it.text.toLowerCase().startsWith(value.toLowerCase())
        );
    }

    protected onClick(e: React.MouseEvent<any>) {
        this.setOpen(true);
    }

    protected onChange(e: React.SyntheticEvent<any>) {
        let value = e.currentTarget.value;
        this.setState(({freeValue: value, isOpen: true}));
        if (this.props.withCombo && this.props.whenChanged)
            this.props.whenChanged(value);

    }

    protected onKeyDown(e: React.KeyboardEvent<any>) {
    }

    protected gotFocus() {
        super.gotFocus();
        if (!this.props.withCombo)
            this.setState({freeValue: ''});
    }

    protected lostFocus() {
        super.lostFocus();
        if (!this.props.withCombo)
            this.setState({freeValue: '', isOpen: false});
        else
            this.setState({isOpen: false});
    }

    protected onClearClick() {
        this.setState({freeValue: ''});
        if (this.props.whenChanged)
            this.props.whenChanged(null);
    }

    protected onToggleClick() {
        this.grabFocus();
        this.setOpen(!this.state.isOpen);
    }

    protected grabFocus() {
        if (this.inputRef.current)
            this.inputRef.current.focus();
    }

    protected valueSelected(value) {
        this.grabFocus();
        this.setOpen(false);
        this.setState({freeValue: this.textFor(value)});
        if (this.props.whenChanged)
            this.props.whenChanged(value);
    }

    protected setOpen(v) {
        this.setState({isOpen: v});
    }

    protected textFor(value) {
        for (let p of this.props.items) {
            if (p.value === value)
                return p.text;
        }
        return '';
    }
}
