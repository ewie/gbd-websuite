import * as React from 'react';

import {UiComponent, UiState, UiPureComponent, UiControlProps} from './base';
import * as util from './util';

interface TouchableProps {
    whenTouched?: () => any;
}

export class Touchable extends UiPureComponent<TouchableProps> {
    render() {
        return <div onClick={this.props.whenTouched}>{this.props.children}</div>;
    }
}


interface ButtonProps extends UiControlProps {
    noTab?: boolean;
    primary?: boolean,
    badge?: string;
    elementRef?: (div: HTMLDivElement) => void;
    whenTouched?: () => any;
}


export class Button extends UiComponent<ButtonProps, UiState> {
    defaultClass = '';

    render() {
        let buttonProps = {
            className: 'uiRawButton',
            tabIndex: this.props.noTab ? -1 : 0,
            title: this.props.tooltip || '',
        };

        if (!this.props.disabled) {
            buttonProps['onClick'] = this.props.whenTouched;
            buttonProps = {...buttonProps, ...this.focusEvents()};
        }


        return <div
            {...util.cls(
                this.defaultClass,
                this.props.className,
                this.props.primary && 'isPrimary',
                this.props.disabled && 'isDisabled',
                this.state.hasFocus && 'hasFocus',
                this.props.badge && 'hasBadge',
            )}
            ref={this.props.elementRef}
        >
            <button {...buttonProps}>
                {this.props.children}
            </button>

            {this.props.badge && <span className='uiButtonBadge'>{this.props.badge}</span>}

        </div>;
    }
}

export class IconButton extends Button {
    defaultClass = 'uiIconButton';
}

export class TextButton extends Button {
    defaultClass = 'uiTextButton';
}

