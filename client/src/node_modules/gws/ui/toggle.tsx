import * as React from 'react';

import {UiComponent, UiState} from './base';
import * as tools from '../tools';

export interface ToggleProps {
    type?: string;
    right?: boolean;
    value: boolean;
    tooltip?: string;
    label: string;
    whenChanged?: any;
}

export class Toggle extends UiComponent<ToggleProps, UiState> {

    buttonRef: React.RefObject<any>;

    constructor(props) {
        super(props);
        this.buttonRef = React.createRef();
    }

    render() {
        let elem = <button
            ref={this.buttonRef}
            onClick={() => this.onClick()}
            {...this.focusEvents()}
        />;

        let label = <div
            className="uiLabel"
            onClick={() => this.onLabelClick()}
        >{this.props.label}</div>;

        let cls = 'isCheckbox';
        if (this.props.type === 'radio')
            cls = 'isRadio';

        return <div
            {...tools.cls(
                'uiToggle',
                cls,
                this.state.hasFocus && 'hasFocus',
                this.props.value && 'isChecked',
                this.props.right && 'alignRight',
            )}
        >{
            this.props.right

                ? <div className="uiControlBox">{label}{elem}</div>
                : <div className="uiControlBox">{elem}{label}</div>
        }</div>
    }

    protected onClick() {
        this.buttonRef.current.focus();
        this.props.whenChanged(!this.props.value);
    }

    protected onLabelClick() {
        this.buttonRef.current.focus();
        this.props.whenChanged(!this.props.value);
    }

}
