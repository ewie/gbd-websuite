import * as React from 'react';
import * as moment from 'moment';

import * as base from './base';
import * as util from './util';

import {Touchable} from './button';
import {NumberInputBox} from './number';
import {Row, Cell} from './layout';


const DEFAULT_DATE_FORMAT = 'YYYY-MM-DD';
const DEFAULT_DATE_UNITS = 'YMD';

interface DateFormat {
    date: string;
    days?: Array<string>;
    months?: Array<string>;
    units?: string;
}

interface DateInputProps extends base.InputProps<string> {
    minValue?: string;
    maxValue?: string;
    withClear?: boolean;
    whenEntered?: (value: string) => void;
    format?: DateFormat;
}

interface DMY {
    d: number;
    m: number;
    y: number;

}


export class DateInput extends base.Control<DateInputProps> {
    render() {
        return <base.Content of={this} withClass="uiDateInput">
            <base.Box>
                {this.inputParts()}
                <Cell flex/>
                {this.props.withClear && <Cell><Touchable
                    className={'uiClearButton' + (util.empty(this.props.value) ? ' isHidden' : '')}
                    whenTouched={() => this.clear()}/></Cell>
                }
            </base.Box>
        </base.Content>
    }

    protected inputParts() {
        let dmy = parseIsoDate(this.props.value),
            fmt = (this.props.format && this.props.format.date) || DEFAULT_DATE_FORMAT,
            units = (this.props.format && this.props.format.units) || DEFAULT_DATE_UNITS;

        let placeholders = {
            'y': units[0] + units[0],
            'yy': units[0] + units[0] + units[0] + units[0],
            'm': units[1],
            'mm': units[1] + units[1],
            'd': units[2],
            'dd': units[2] + units[2],
        };

        let parts = [],
            hasFocusRef = false;

        fmt.toLowerCase().replace(/([a-z]+)|([^a-z]+)/g, (_, e, s) => {
            if (s) {
                parts.push(<Cell key={parts.length} className="uiDateDelimiter">{s}</Cell>);
                return '';
            }

            let c = e[0];

            if ('dmy'.includes(c)) {
                let input = <NumberInputBox
                    value={dmy[c]}
                    placeholder={placeholders[e] || ''}
                    whenChanged={v => this.changed(c, v)}
                    focusRef={hasFocusRef ? null : this.focusRef}
                />;
                hasFocusRef = true;
                parts.push(<Cell key={parts.length} className={'uiDateInput_' + c}>{input}</Cell>);
            }

            return '';
        });

        return parts;
    }

    protected changed(what, val: number) {
        let dmy = parseIsoDate(this.props.value),
            p = {
                d: util.formatNumber(dmy.d),
                m: util.formatNumber(dmy.m),
                y: util.formatNumber(dmy.y),
            };
        p[what] = util.formatNumber(val);

        if (this.props.whenChanged)
            this.props.whenChanged([p.y, p.m, p.d].join('-'));
    }


    protected clear() {
        this.grabFocus();
        if (this.props.whenChanged)
            this.props.whenChanged('');
    }
}


function parseIsoDate(val): DMY {
    let s = (String(val || '').trim()).split('-');

    return {
        y: util.parseNumber(s[0]),
        m: util.parseNumber(s[1]),
        d: util.parseNumber(s[2]),
    }
}
