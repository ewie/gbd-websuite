import * as React from 'react';
import * as moment from 'moment';

import {UiComponent, UiState, UiInputProps} from './base';
import {Button} from './button';
import {NumberInput} from './number';
import {Row, Cell} from './layout';

import * as util from './util';

const DEFAULT_FORMAT = 'YYYY-MM-DD';


interface DateInputProps extends UiInputProps<string> {
    minValue?: string;
    maxValue?: string;
    withClear?: boolean;
    whenEntered?: (value: string) => void;
    formatDate?: string;
    formatDays?: Array<string>;
    formatMonths?: Array<string>;
}

interface DMY {
    d: number;
    m: number;
    y: number;

}


export class DateInput extends UiComponent<DateInputProps, UiState> {
    inputRef: React.RefObject<HTMLInputElement>;

    constructor(props) {
        super(props);
        this.inputRef = React.createRef();
    }


    render() {
        let rootProps = {
            ...util.cls(
                'uiDateInput',
                this.state.hasFocus && 'hasFocus',
                this.props.disabled && 'isDisabled'),
            ...this.focusEvents()
        };

        let dmy = splitIsoDate(this.props.value || '2013-3-10'),
            fmt = parseDateFormat(this.props.formatDate || 'm/dd, yy' || DEFAULT_FORMAT);

        let parts = {
            d: <NumberInput className="uiDateInputDay" value={dmy.d} whenChanged={v => this.changed('d', v)}/>,
            m: <NumberInput className="uiDateInputMonth" value={dmy.m} whenChanged={v => this.changed('m', v)}/>,
            y: <NumberInput className="uiDateInputYear" value={dmy.y} whenChanged={v => this.changed('y', v)}/>,
        };


        return <div {...rootProps}>
            {this.props.label && <div className="uiLabel">{this.props.label}</div>}

            <div className="uiControlBox">
                {fmt.map((f, n) => <Cell key={n}>{parts[f] || f}</Cell>)}
                <Cell flex/>
                {this.props.withClear && <Cell><Button
                    noTab
                    className={'uiInputClearButton' + (util.empty(this.props.value) ? ' isHidden' : '')}
                    whenTouched={() => this.clear()}/></Cell>
                }
            </div>
        </div>
    }

    protected changed(what, val: number) {
        let dmy = splitIsoDate(this.props.value),
            p = {
                d: util.formatNumber(dmy.d),
                m: util.formatNumber(dmy.m),
                y: util.formatNumber(dmy.y),
            };
        p[what] = util.formatNumber(val);

        if (this.props.whenChanged)
            this.props.whenChanged([p.y, p.m, p.d].join('-'));
    }


    protected clear() {
        if (this.props.whenChanged)
            this.props.whenChanged('');

        util.nextTick(() => {
            if (this.inputRef.current)
                this.inputRef.current.focus();
        });
    }
}


function splitIsoDate(val): DMY {
    let s = (String(val || '').trim()).split('-');

    return {
        y: util.parseNumber(s[0]),
        m: util.parseNumber(s[1]),
        d: util.parseNumber(s[2]),
    }
}


function parseDateFormat(fmt) {
    // NB: we use babel formats for dates, which appears to follow
    // https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
    // this isn't always true for moment, but we only use basic d, m, y patterns

    let m = fmt.toLowerCase().match(/[a-z]+|[^a-z]+/g);

    return (m || []).map(t =>
        (t[0] === 'y' || t[0] === 'm' || t[0] === 'd') ? t[0] : t);

}