import * as React from 'react';

import {UiComponent, UiState, UiProps} from './base';
import {Button} from './buttons';
import * as tools from '../tools';

export interface TextInputProps extends UiProps {
    value: string;
    tooltip?: string;
    label?: string;
    placeholder?: string;
    withClear?: boolean;
    disabled?: boolean;
    whenChanged?: any;
    whenEntered?: any;
}

export interface TextAreaProps extends UiProps {
    value: string;
    height?: number;
    tooltip?: string;
    label?: string;
    placeholder?: string;
    disabled?: boolean;
    whenChanged?: any;
}

export class TextInput extends UiComponent<TextInputProps, UiState> {

    inputType = "text";
    ref: React.RefObject<HTMLInputElement>;

    constructor(props) {
        super(props);
        this.ref = React.createRef();
    }

    onChange(e: React.SyntheticEvent<any>) {
        if (this.props.whenChanged)
            this.props.whenChanged(e.currentTarget.value);
    }

    onKeyDown(e: React.KeyboardEvent<any>) {
        if (e.key === 'Enter' && this.props.whenEntered)
            this.props.whenEntered(e.currentTarget.value);
    }

    clear() {
        if (this.props.whenChanged)
            this.props.whenChanged('');
        tools.nextTick(() => {
            if (this.ref.current)
                this.ref.current.focus();
        });
    }

    render() {
        let input = <input
            className='uiRawInput'
            tabIndex={0}
            ref={this.ref}
            type={this.inputType}
            disabled={this.props.disabled}
            value={this.props.value || ''}
            title={this.props.tooltip || ''}
            placeholder={this.props.placeholder || ''}
            onChange={e => this.onChange(e)}
            onKeyDown={e => this.onKeyDown(e)}
            {...this.focusEvents()}
        />;

        return <div {...tools.cls('uiInput', this.state.hasFocus && 'hasFocus', this.props.disabled && 'isDisabled')}>
            {this.props.label && <div className="uiLabel">{this.props.label}</div>}
            <div className="uiControlBox">
                {input}
                {this.props.withClear && <Button
                    noTab
                    className={tools.empty(this.props.value) ? 'uiInputClearButtonHidden' : 'uiInputClearButton'}
                    whenTouched={() => this.clear()}/>
                }
            </div>
        </div>
    }
}

export class PasswordInput extends TextInput {
    inputType = "password";
}

export class TextArea extends UiComponent<TextAreaProps, UiState> {

    ref: React.RefObject<HTMLTextAreaElement>;

    constructor(props) {
        super(props);
        this.ref = React.createRef();
    }

    onChange(e: React.SyntheticEvent<any>) {
        if (this.props.whenChanged)
            this.props.whenChanged(e.currentTarget.value);
    }

    render() {
        let input = <textarea
            className='uiRawTextArea'
            tabIndex={0}
            ref={this.ref}
            disabled={this.props.disabled}

            value={this.props.value || ''}
            title={this.props.tooltip || ''}
            placeholder={this.props.placeholder || ''}
            onChange={e => this.onChange(e)}
            {...this.focusEvents()}
        />;

        return <div {...tools.cls('uiTextArea', this.state.hasFocus && 'hasFocus', this.props.disabled && 'isDisabled')}>
            {this.props.label && <div className="uiLabel">{this.props.label}</div>}
            <div className="uiControlBox" style={{height: this.props.height || 100}}>
                {input}
            </div>
        </div>
    }
}
