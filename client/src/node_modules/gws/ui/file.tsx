import * as React from 'react';

import * as base from './base';
import * as util from './util';

import {Touchable} from './button';

export interface FileInputProps extends base.InputProps<FileList> {
    multiple?: boolean;
    accept?: string;
    listFormat?: (files: FileList) => React.ReactNode,
}


export class FileInput extends base.Control<FileInputProps> {

    ref: React.RefObject<HTMLInputElement>;

    constructor(props) {
        super(props);
        this.ref = React.createRef();
    }

    onChange(e: React.SyntheticEvent<any>) {
        if (this.props.whenChanged)
            this.props.whenChanged(e.currentTarget.files);
    }

    render() {
        let input = null;

        if (!this.props.disabled) {
            input = <input
                type="file"
                accept={this.props.accept}
                disabled={this.props.disabled}
                multiple={this.props.multiple}
                onChange={e => this.onChange(e)}
                ref={this.ref}
                style={{display: 'none'}}
            />;
        }

        let hasFiles = this.props.value && this.props.value.length > 0;

        let listFormat = this.props.listFormat || defaultListFormat;

        let cls = util.className(
            'uiFileInput',
            hasFiles && 'hasFiles');

        return <base.Content of={this} withClass={cls}>
            <base.Box>
                {input}
                <Touchable
                    className='uiFileInputButton'
                    whenTouched={() => this.ref.current.click()}
                />
                <div className='uiFileInputList'>
                    {listFormat(this.props.value)}
                </div>
            </base.Box>
        </base.Content>
    }
}

function defaultListFormat(files) {
    if (!files || !files.length)
        return null;

    let fs = [].slice.call(this.props.value, 0);

    return <div>{fs.map(f => {
        let name = f.name.slice(0, 50),
            size = (f.size / 1024).toFixed(2) + 'K';
        return <p key={name}>{name} ({size})</p>
    })}</div>


}

