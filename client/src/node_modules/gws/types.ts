import * as React from 'react';
import * as ol from 'openlayers';
import * as api from './core/gws-api';

export interface Dict {
    [key: string]: any;
}

export interface IStoreWrapper {
    addHook(kind, type, handler);
    connect(klass, props);
    dispatch(type, args);
    getValue(key);
    update(args);
    wrap(element);
}

export interface IApplication {
    domNode: HTMLDivElement;
    map: IMapManager;
    overviewMap: IMapManager;
    options: Dict;
    project: api.ProjectProps;
    server: api.GwsServerApi;
    store: IStoreWrapper;
    tags: Dict;
    urlParams: Dict;

    __(key);

    createController(klass: any, parent: IController, cfg?: Dict);
    createControllerFromConfig(parent: IController, cfg: Dict);
    controller(uid: string): IController;
    controllerByTag(tag: string): IController;

    initState(args: Dict);
    reload();

    requestStarted(url);
    requestEnded(url);

    mounted();

    whenLoaded(fn: (value: any) => void);
    whenChanged(prop: string, fn: (value: any) => void);
    whenCalled(actionName, fn: (object) => void);
    call(actionName, args?: object);

    updateLocation(data: object);
    navigate(url: string, target?: string);

    addTool(name: string, obj: ITool);
    startTool(name: string);
    stopTool(name: string);
    toggleTool(name: string);
}

export interface IController {
    uid: string;
    tag: string;
    app: IApplication;
    map: IMapManager;
    options: Dict;
    children: Array<IController>;
    parent?: IController;
    defaultView: React.ReactElement<any>;
    mapOverlayView: React.ReactElement<any>;
    appOverlayView: React.ReactElement<any>;

    init();
    update(args: any);
    touched();
    renderChildren(): Array<React.ReactElement<any>>;
    __(key: string): string;
}

export interface ITool extends IController {
    start();
    stop();
}

export interface IUser {
    displayName: string;
}

export interface IMapLayer {
    type: string;
    uid: string;
    title: string;
    attributes: Dict;
    extent: ol.Extent;

    map: IMapManager;

    attribution: string;
    description: string;

    parent?: IMapLayer;
    children: Array<IMapLayer>;
    hasChildren: boolean;

    expanded: boolean;
    visible: boolean;
    selected: boolean;
    listed: boolean;
    unfolded: boolean;

    editAccess?: Array<string>;

    shouldDraw: boolean;
    shouldList: boolean;

    isSystem: boolean;

    oLayer?: ol.layer.Layer;
    printItem?: api.PrintItem;

    show();
    hide();
    changed();
    beforeDraw();
    reset();
}

export interface IMapFeatureLayer extends IMapLayer {
    editStyle?: IMapStyle;
    features: Array<IMapFeature>;
    geometryType: string;
    source: ol.source.Vector;
    style?: IMapStyle;
    dataModel: Array<api.Attribute>;

    addFeature(feature: IMapFeature): boolean;
    addFeatures(features: Array<IMapFeature>): number;
    removeFeature(feature: IMapFeature);
    loadFeatures(where): Promise<Array<IMapFeature>>;

    clear();
    setStyle(style: IMapStyle);

}

export interface MapViewState {
    centerX: number;
    centerY: number;
    resolution: number;
    scale: number;
    rotation: number;
    angle: number;
}

export interface IMapStyle {
    oStyle: ol.style.Style;
    props: api.StyleProps;
    getText(copy: boolean): ol.style.Text | null;
    getImage(copy: boolean): ol.style.Image | null;
    apply(geom: ol.geom.Geometry, label: string, resolution: number): Array<ol.style.Style>;
}

export interface IMapDrawInteractionOptions {
    shapeType: string;
    style?: IMapStyle;
    whenStarted?: (oFeatures: Array<ol.Feature>) => void;
    whenEnded?: (oFeatures: Array<ol.Feature>) => void;
}

export interface IMapSelectInteractionOptions {
    layer: IMapFeatureLayer;
    style?: IMapStyle;
    whenSelected?: (oFeatures: Array<ol.Feature>) => void;
}

export interface IMapModifyInteractionOptions {
    layer?: IMapFeatureLayer;
    features?: ol.Collection<ol.Feature>,
    style?: IMapStyle;
    whenSelected?: (oFeatures: Array<ol.Feature>) => void;
    whenEnded?: (olf: Array<ol.Feature>) => void;
    whenStarted?: (oFeatures: Array<ol.Feature>) => void;
}

export interface IMapSnapInteractionOptions {
    layer?: IMapFeatureLayer;
}

export interface IMapPointerInteractionOptions {
    hover?: 'always' | 'shift';
    whenTouched: (evt: ol.MapBrowserPointerEvent) => void;
}

export interface DrawInteractionOptions {
    geometryType: string;
    geometryFunction?: any;
    style?: IMapStyle;
    whenEnded?: (olf: ol.Feature) => void;
    whenStarted?: (olf: ol.Feature) => void;
}

export interface ModifyInteractionOptions {
    style?: IMapStyle;
    source?: ol.source.Vector;
    features?: ol.Collection<ol.Feature>;
    whenEnded?: (olf: Array<ol.Feature>) => void;
    whenStarted?: (oFeatures: Array<ol.Feature>) => void;
}

export interface FeatureSearchArgs {
    keyword?: string;
    geometry?: ol.geom.Geometry;
    limit?: number;
}

export interface IMapManager {
    app: IApplication;
    bbox: ol.Extent;
    viewExtent: ol.Extent;
    crs: string;
    domNode: HTMLDivElement;
    extent: ol.Extent;
    oMap: ol.Map;
    oView: ol.View;
    projection: ol.proj.Projection;
    resolutions: Array<number>;
    root: IMapLayer;
    size: ol.Size;
    viewState: MapViewState;

    init(props: api.MapProps, appLoc: object);
    update(args: any);
    changed();

    addLayer(layer: IMapLayer, where: number, parent: IMapLayer);
    addTopLayer(layer: IMapLayer);
    addServiceLayer(layer: IMapFeatureLayer);

    removeLayer(layer: IMapLayer);
    getLayer(uid: string): IMapLayer;
    editableLayers(): Array<IMapFeatureLayer>;

    setLayerVisible(layer: IMapLayer, on: boolean);
    setLayerExpanded(layer: IMapLayer, on: boolean);
    hideAllLayers();
    deselectAllLayers();

    selectLayer(layer: IMapLayer);
    //queryLayerDescription(layer: IMapLayer);

    setResolution(n: number, animate?: boolean);
    setNextResolution(delta: number, animate?: boolean);
    setScale(n: number, animate?: boolean);
    setRotation(n: number, animate?: boolean);
    setAngle(n: number, animate?: boolean);
    setViewExtent(extent: ol.Extent, animate?: boolean);
    setCenter(c: ol.Coordinate, animate?: boolean);
    setViewState(vs: any, animate?: boolean);
    resetViewState(animate?: boolean);

    setInteracting(on: boolean);

    setInteractions(ixs: Array<ol.interaction.Interaction | string>);
    setExtraInteractions(ixs: Array<ol.interaction.Interaction | string>);
    lockInteractions();
    unlockInteractions();
    pushInteractions();
    popInteractions();

    // addOverlay(el: React.ReactElement<HTMLDivElement>): ol.Overlay;
    // removeOverlay(ov: ol.Overlay);

    drawInteraction(opts: IMapDrawInteractionOptions): ol.interaction.Draw;
    selectInteraction(opts: IMapSelectInteractionOptions): ol.interaction.Select;
    modifyInteraction(opts: IMapModifyInteractionOptions): ol.interaction.Modify;
    snapInteraction(opts: IMapSnapInteractionOptions): ol.interaction.Snap;
    pointerInteraction(opts: IMapPointerInteractionOptions): ol.interaction.Pointer;

    readFeature(fs: api.FeatureProps): IMapFeature;
    readFeatures(fs: Array<api.FeatureProps>): Array<IMapFeature>;
    writeFeatures(fs: Array<IMapFeature>): Array<api.FeatureProps>;

    getStyleFromSelector(selector: string): IMapStyle | null;
    getStyle(props: api.StyleProps): IMapStyle | null;
    styleFunction(style?: IMapStyle);

    geom2shape(geom: ol.geom.Geometry): api.ShapeProps;
    shape2geom(shape: api.ShapeProps) : ol.geom.Geometry;

    bitmapAsDataURL(boxRect: ClientRect): string;
    printParams(boxRect: ClientRect | null, dpi: number): Promise<api.PrintParams>;

    searchForFeatures(args: FeatureSearchArgs): Promise<Array<IMapFeature>>;

    formatCoordinate(n: number): string;
    collect(layer: IMapLayer, fn: (la: IMapLayer) => any);
}

export interface IMapFeature {
    geometry?: ol.geom.Geometry;
    label: string;
    oFeature?: ol.Feature;
    printProps: api.PrintFeatureProps;
    props: api.FeatureProps;
    shape?: api.ShapeProps;
    style?: IMapStyle;
    uid: string;

    setStyle(style: IMapStyle);
    setGeometry(geom: ol.geom.Geometry);
    setLabel(label: string);
}

export interface IMapFeatureArgs {
    props?: api.FeatureProps;
    geometry?: ol.geom.Geometry;
    oFeature?: ol.Feature;
    style?: IMapStyle;
    label?: string;
}

export interface ViewProps {
    controller: IController;
}

export interface IToolbarItem extends IController {
    barView: React.ReactElement<any>;
    overflowView: React.ReactElement<any>;
    tooltip: string;
    tool?: string;
    whenTouched: () => void;
}


export interface ISidebarItem extends IController {
    iconClass: string;
    tabView: React.ReactElement<any>;
    tooltip: string;
}

