import * as React from 'react';

import * as types from '../types';
import * as ui from '../ui';
import * as tools from '../tools';

let {Row, Cell} = ui.Layout;

interface BaseListProps {
    controller: types.IController;
    features: Array<types.IMapFeature>;
    item?: (f: types.IMapFeature) => React.ReactNode;
    isSelected?: (f: types.IMapFeature) => boolean;
}

interface ListProps extends BaseListProps {
    leftIcon?: (f: types.IMapFeature) => React.ReactNode;
    rightIcon?: (f: types.IMapFeature) => React.ReactNode;
}

interface ListItemProps extends ListProps {
    feature: types.IMapFeature;
}

interface PopupListProps extends BaseListProps {
}

interface PopupListState {
    selectedIndex?: number;
}

export class List extends React.PureComponent<ListProps> {
    render() {
        return <div className="cmpFeatureList">
            {this.props.features.map(f =>
                <ListItem key={f.uid} feature={f} {...this.props} />)}
        </div>
    }
}

class ListItem extends React.PureComponent<ListItemProps> {
    render() {
        let f = this.props.feature,
            item = this.props.item
                ? this.props.item(f)
                : <ui.Text content={f.props.title}/>,
            leftIcon = this.props.leftIcon
                ? this.props.leftIcon(f)
                : null,
            rightIcon = this.props.rightIcon
                ? this.props.rightIcon(f)
                : null,
            selected = this.props.isSelected && this.props.isSelected(f);

        return <Row {...tools.cls('cmpFeatureListItem', selected && 'isSelected')}>
            {leftIcon && <Cell className="cmpFeatureListIcon">{leftIcon}</Cell>}
            <Cell flex className="cmpFeatureListContent">{item}</Cell>
            {rightIcon && <Cell className="cmpFeatureListIcon">{rightIcon}</Cell>}
        </Row>
    }
}

export class PopupList extends React.Component<PopupListProps, PopupListState> {

    state = {selectedIndex: 0};

    componentDidMount() {
        this.setState({selectedIndex: 0})
    }

    componentDidUpdate(prevProps: PopupListProps) {
        if (prevProps.features !== this.props.features) {
            console.log('NEW FEATURES');
            this.setState({selectedIndex: 0})
        }
    }

    show(n) {
        this.setState({
            selectedIndex: n
        });
        this.props.controller.update({
            marker: {
                features: [this.props.features[n]],
                mode: 'draw',
            }
        });
    }

    render() {
        let cc = this.props.controller;
        let sel = this.state.selectedIndex || 0;
        let f = this.props.features[sel];

        if (!f)
            return null;

        let len = this.props.features.length;

        let dec = () => this.show(sel === 0 ? len - 1 : sel - 1);
        let inc = () => this.show(sel === len - 1 ? 0 : sel + 1);

        let zoom = f => cc.update({
                marker: {
                    features: [f],
                    mode: 'zoom draw',
                }
            });

        let close = () => cc.update({
            marker: null,
            popupContent: null
        });

        let lens = f => {
            cc.update({
                lensGeometry: f.geometry
            });
            cc.app.startTool('Tool.Lens')
        };

        let select = f => cc.update({
            selectAddFeature: f
        });

        // if(!cc.app.controllerByTag('Toolbar.Lens'))
        //     lens = null;
        //
        // if(!cc.app.controllerByTag('Toolbar.Select'))
        //     select = null;


        let item = this.props.item;
        if (!item)
            item = f => <ui.TextBlock className="cmpDescription" withHTML content={f.props.description}/>;

        return <div className="modPopupContent">
            <div className="modPopupBody">
                {item(f)}
            </div>
            <div className="modPopupFooter">
                <Row>
                    <Cell flex/>

                    {len > 1 && <Cell>
                        <div className="modPopupPagerText">
                            {this.state.selectedIndex + 1} / {len}
                        </div>
                    </Cell>}
                    {len > 1 && <Cell>
                        <ui.IconButton
                            className='modPopupPagerBack'
                            tooltip={cc.__('modPopupPagerBack')}
                            whenTouched={dec}/>
                    </Cell>}
                    {len > 1 && <Cell>
                        <ui.IconButton
                            className='modPopupPagerForward'
                            tooltip={cc.__('modPopupPagerForward')}
                            whenTouched={inc}/>
                    </Cell>}

                    {lens && <Cell>
                        <ui.IconButton
                            className='modPopupLensButton'
                            tooltip={cc.__('modPopupLensButton')}
                            whenTouched={() => lens(f)}
                        />
                    </Cell>}

                    {select && <Cell>
                        <ui.IconButton
                            className='modPopupSelectButton'
                            tooltip={cc.__('modPopupSelectButton')}
                            whenTouched={() => select(f)}
                        />
                    </Cell>}

                    <Cell>
                        <ui.IconButton
                            className='modPopupZoomButton'
                            tooltip={cc.__('modPopupZoomButton')}
                            whenTouched={() => zoom(f)}
                        />
                    </Cell>
                    <Cell>
                        <ui.IconButton
                            className='modPopupCloseButton'
                            tooltip={cc.__('modPopupCloseButton')}
                            whenTouched={close}
                        />
                    </Cell>
                </Row>
            </div>
        </div>
    }
}
