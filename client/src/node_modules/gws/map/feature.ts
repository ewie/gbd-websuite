import * as ol from 'openlayers';

import * as types from '../types';
import * as api from '../core/gws-server.api';

let uid = 0;

let defaultProps = {
    attributes: {},
    description: '',
    label: '',
    teaser: '',
    title: '',
}

export class Feature implements types.IMapFeature {
    props: api.FeatureProps = {};
    label: string;
    style = null;
    uid = '';

    map: types.IMapManager;
    oFeature: ol.Feature = null;

    constructor(map, args: types.IMapFeatureArgs) {
        this.map = map;

        if (args.props) {
            this.uid = args.props.uid;
            this.props = args.props;
        } else {
            this.uid = '_feature_' + (++uid);
            // lots of folks depend on this
            this.props = Object.assign({}, defaultProps);
        }

        this.oFeature = this.getOlf(args);
        if (this.oFeature) {
            this.oFeature['_featureObj'] = this;
        }

        this.setStyle(args.style);

        if (args.label) {
            this.setLabel(args.label);
        } else if (this.props.label) {
            this.setLabel(this.props.label);
        } else if (this.oFeature) {
            this.setLabel(this.oFeature.get('label'));
        }
    }

    get geometry() {
        return this.oFeature ? this.oFeature.getGeometry() : null;
    }

    get printProps() {
        let geom = this.geometry;

        return {
            label: this.label,
            style: this.style ? this.style.props : null,
            shape: geom ? this.map.geom2shape(geom) : null,
        }
    }

    setStyle(style: types.IMapStyle) {
        this.style = style;
        if (this.oFeature)
            this.oFeature.setStyle(this.map.styleFunction(this.style));
    }

    setLabel(label: string) {
        this.label = label;
        if (this.oFeature)
            this.oFeature.set('label', label);
    }

    setGeometry(geom) {
        if (this.oFeature)
            this.oFeature.setGeometry(geom);
        else
            this.oFeature = new ol.Feature(geom);

    }

    protected getOlf(args) {
        if (args.oFeature) {
            return args.oFeature;
        }

        let geom = args.geometry || this.map.shape2geom(this.props.shape);

        if (geom) {
            return new ol.Feature(geom)
        }
    }

    // static fromProps(map, props: api.FeatureProps) {
    //     let feature = new this(map);
    //
    //     feature.uid = props.uid;
    //     feature.props = props;
    //
    //     if (props.shape) {
    //         // the features are assumed to be in the map projection
    //         let format = new ol.format.GeoJSON();
    //         feature.geometry = format.readGeometry(props.shape.geometry)
    //     }
    //     return feature;
    // }
    //
    // static fromGeometry(map, geometry, attributes?: types.Dict) {
    //     let feature = new this(map);
    //
    //     feature.geometry = geometry;
    //
    //     if (attributes)
    //         feature.attributes = attributes;
    //
    //     return feature;
    // }

    static fromOlFeature(map, f: ol.Feature) {
        // let feature = f.get('_featureObj');
        // if (feature) {
        //     feature.geometry = f.getGeometry();
        // } else {
        //     feature = this.fromGeometry(map, f.getGeometry());
        // }
        // return feature;
        return null;
    }

}