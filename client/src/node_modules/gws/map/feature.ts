import * as ol from 'openlayers';

import * as types from '../types';
import * as api from '../core/gws-api';

let uid = 0;

export class Feature implements types.IMapFeature {
    uid: string = '';
    attributes: Array<api.Attribute> = [];
    elements: types.Dict = {};
    layerUid: string = '';
    style?: types.IMapStyle = null;
    label: string = '';
    oFeature?: ol.Feature = null;

    map: types.IMapManager;

    constructor(map, args: types.IMapFeatureArgs) {
        this.map = map;

        if (args.props) {
            this.uid = args.props.uid;
            this.attributes = args.props.attributes || [];
            this.elements = args.props.elements || {};
            this.layerUid = args.props.layerUid || '';
            this.style = args.style;
        } else {
            this.uid = '_feature_' + (++uid);
        }

        this.oFeature = this.oFeatureFromArgs(args);
        if (this.oFeature) {
            this.oFeature['_gwsFeature'] = this;
        }

        this.setStyle(args.style);

        if (args.label) {
            this.setLabel(args.label);
        } else if (this.elements.label) {
            this.setLabel(this.elements.label);
        } else if (this.oFeature) {
            this.setLabel(this.oFeature.get('label'));
        }

    }

    get geometry() {
        return this.oFeature ? this.oFeature.getGeometry() : null;
    }

    get shape() {
        let geom = this.geometry;
        return geom ? this.map.geom2shape(geom) : null;
    }

    get props() {
        return {
            attributes: this.attributes,
            elements: this.elements,
            layerUid: this.layerUid,
            shape: this.shape,
            style: this.style ? this.style.props : null,
            uid: this.uid
        }
    }

    setStyle(style?: types.IMapStyle) {
        if (style) {
            this.style = style;
            if (this.oFeature)
                this.oFeature.setStyle(this.map.styleFunction(this.style));
        }
    }

    setLabel(label: string) {
        this.label = label;
        if (this.oFeature)
            this.oFeature.set('label', label);
    }

    setGeometry(geom) {
        if (this.oFeature)
            this.oFeature.setGeometry(geom);
        else
            this.oFeature = new ol.Feature(geom);

    }

    protected oFeatureFromArgs(args) {
        if (args.oFeature) {
            return args.oFeature;
        }

        if (args.geometry) {
            return new ol.Feature(args.geometry)
        }

        if (args.props.shape) {
            let geom = this.map.shape2geom(args.props.shape);
            return new ol.Feature(geom);
        }
    }
}