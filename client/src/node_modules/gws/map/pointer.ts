import * as ol from 'openlayers';

import * as types from '../types';
import * as tools from '../tools';

const HOVER_DELAY = 500;

export class PointerInteraction extends ol.interaction.Pointer {
    isDragging = false;
    options: types.Dict;
    map: types.IMapManager;

    constructor(map, options) {
        super({
            handleDownEvent: evt => this.handleDownEvent(evt),
            handleUpEvent: evt => this.handleUpEvent(evt),
            handleDragEvent: evt => this.handleDragEvent(evt),
            handleMoveEvent: tools.debounce(evt => this.handleMoveEvent(evt), HOVER_DELAY)
        });

        this.map = map;
        this.options = options;
    }

    protected down(evt) {
        if (!this.isDragging && this.options.whenTouched)
            this.options.whenTouched(evt);
    }

    protected handleDownEvent(evt) {
        this.isDragging = false;
        return true;
    }

    protected handleUpEvent(evt) {
        this.down(evt);
        return true
    }

    protected handleDragEvent(evt) {
        this.isDragging = true;
        return true;
    }

    protected handleMoveEvent(evt) {
        if (this.options.hover === 'always' || (this.options.hover === 'shift' && evt.originalEvent.shiftKey))
            this.down(evt);
        return true;
    }

}

