import * as ol from 'openlayers';

import * as types from '../types';

// @TODO: drawing with clicks only

export class DrawInteraction extends ol.interaction.Draw {
    map: types.IMapManager;
    options: types.Dict;
    isCancelled = false;
    isDrawing = false;

    protected onStart(evt: ol.interaction.Draw.Event) {
        this.isCancelled = false;
        this.isDrawing = true;

        if (this.options.whenStarted)
            this.options.whenStarted(evt.feature);

        this.map.update({
            mapDrawEndFunction: ok => {
                this.isCancelled = !ok;
                this.finishDrawing();
            }
        });
    }

    protected onEnd(evt: ol.interaction.Draw.Event) {
        this.isDrawing = false;

        if (!this.isCancelled && this.options.whenEnded)
            this.options.whenEnded(evt.feature);
        this.map.update({
            mapDrawEndFunction: null,
        });
    }

    setActive(active) {
        if(!active && this.isDrawing ) {
            this.isCancelled = true;
            this.finishDrawing();
        }
        super.setActive(active);
    }

    constructor(map, options) {
        super({
            type: options.geometryType,
            freehandCondition: ol.events.condition.never,
            style: map.styleFunction(options.style),
        });

        this.map = map;
        this.options = options;

        this.on('drawstart', this.onStart.bind(this));
        this.on('drawend', this.onEnd.bind(this));

        let he = this['handleEvent'].bind(this);
        // this['handleEvent'] = evt => {
        //     if (evt.type === 'pointermove')
        //         return false;
        //     return he(evt);
        // }
    }

}
