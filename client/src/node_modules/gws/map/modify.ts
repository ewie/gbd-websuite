import * as ol from 'openlayers';

import * as types from '../types';

export class ModifyInteraction extends ol.interaction.Modify {
    map: types.IMapManager;
    options: types.Dict;


    protected featuresFromEvent(evt) {
        let coord = evt.mapBrowserEvent.coordinate;
        if (this.options.source)
            return [this.options.source.getClosestFeatureToCoordinate(coord)];
        return evt.features;
    }

    protected onStart(evt: ol.interaction.Modify.Event) {
        let fs = this.featuresFromEvent(evt);
        console.log('MODIFY_START', fs);

        if (this.options.whenStarted) {
            this.options.whenStarted(fs);
        }

    }

    protected onEnd(evt: ol.interaction.Modify.Event) {
        let fs = evt.features.getArray();
        console.log('MODIFY_END', fs)

        if (this.options.whenEnded)
            this.options.whenEnded(fs);
    }

    constructor(map, options) {
        super({
            ...options,
            freehandCondition: ol.events.condition.never,
            deleteCondition: ol.events.condition.singleClick,
            style: map.styleFunction(options.style),
        });

        this.map = map;
        this.options = options;

        this.on('modifystart', this.onStart.bind(this));
        this.on('modifyend', this.onEnd.bind(this));

    }

}
