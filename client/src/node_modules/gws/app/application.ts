import * as types from '../types';

import {StoreWrapper} from '../core/reduxa';
import {Server} from '../core/server';
import {MapManager} from '../map/manager';
import {DefaultTool} from './default-tool';
import {RootController} from './root-controller';

import * as api from '../core/gws-api';
import * as tools from '../tools';

export class Application implements types.IApplication {
    domNode: HTMLDivElement;
    map: MapManager;
    overviewMap: MapManager;
    options: types.Dict;
    project: api.ProjectProps;
    server: Server;
    store: StoreWrapper;
    tags: types.Dict;

    protected controllers: { [key: string]: types.IController } = {};
    protected cssBreakpoints: Array<[string, number]>;
    protected initialState: types.Dict = {};
    protected labels = {};
    protected locale = '';
    protected tempTools = [];
    protected tools: types.Dict = {};
    protected uid = 0;
    protected requestingUrls: Array<string> = [];
    protected isLoaded = false;

    static async create(options): Promise<Application> {
        let app = new this(options);
        return await app.init();
    }

    get rootController() {
        return this.controllers['root'];
    }

    constructor(options) {
        console.log(options)
        this.options = options;

        this.store = new StoreWrapper({});

        this.tags = this.options.tags;
        this.tags['DefaultTool'] = DefaultTool;

        this.labels = this.options.labels;
        this.locale = this.options.locale || 'en_CA';

        let url = this.options.serverUrl || '/_';
        this.server = new Server(this, url);

        this.server.whenRequestStarted = (cmd, params) => this.whenRequestStarted('COMMAND:' + cmd);
        this.server.whenRequestEnded = (cmd, params) => this.whenRequestEnded('COMMAND:' + cmd);

        this.cssBreakpoints = tools.entries(this.options.cssBreakpoints).sort((a, b) => a[1] - b[1]);
        this.domNode = options.domNode;
    }

    whenChanged(prop, fn) {
        this.store.addHook('listen', prop, fn);
    }

    whenRequestStarted(url) {
        this.requestingUrls.push(url);
        this.store.update({'appRequestCount': this.requestingUrls.length});
        //console.log('requestStarted', this.requestingUrls.length)
    }

    whenRequestEnded(url) {
        let p = this.requestingUrls.indexOf(url);
        if (p >= 0) {
            this.requestingUrls.splice(p, 1);
        }
        this.store.update({'appRequestCount': this.requestingUrls.length});
        //console.log('requestEnded', this.requestingUrls.length)
    }

    whenMounted() {
        let node = this.domNode.querySelector('.gwsMap');
        this.map.setTargetDomNode(node);
    }

    whenLoaded(fn) {
        this.store.addHook('listen', 'appIsLoaded', fn);
    }

    async init() {

        let res = await this.server.projectInfo({
            projectUid: this.options.projectUid
        });

        if (res.error) {
            this.fatalError(res.error.status || 500);
            return null;
        }

        console.log(res);

        this.project = res.project;

        this.initialState = this.project.client.options || {};
        this.initialState.user = res.user;

        // @TODO add help configuration to the project
        this.initialState.helpUrl = this.options.defaultHelpUrl;
        this.initialState.homeUrl = this.options.defaultHomeUrl;

        this.map = new MapManager(this, true);
        await this.map.init(this.project.map, _url2loc(location.href));

        if (this.project.overviewMap) {
            this.overviewMap = new MapManager(this, false);
            await this.overviewMap.init(this.project.overviewMap, {});
        }

        this.controllers['root'] = new RootController(this, {
            elements: this.rootElements(this.project.client.elements)
        });

        await this.controllers['root'].init();

        this.tools['DefaultTool'] = new DefaultTool(this, {});
        this.startTool('DefaultTool');

        this.store.update(this.initialState);

        let b = this.initialState.toolbarActiveButton;

        if (b) {
            let c = this.controllerByTag(b);
            if (c)
                c.touched();
        }

        window.onresize = () => this.onWindowResize();
        this.onWindowResize();

        window.onpopstate = () => this.onPopState();
        this.onPopState();


        console.log('APP LOADED');
        this.isLoaded = true;
        this.map.changed();

        this.store.update({
            appIsLoaded: true
        });

        return this;
    }

    initState(args) {
        this.initialState = {...args, ...this.initialState};
    }

    reload() {
        console.log('RELOAD')
        window.location.reload();
    }

    startTool(name: string, temp?: boolean) {
        if (temp) {
            console.log('START_TEMP_TOOL', name);
            this.map.pushInteractions();
            this.tempTools.push(name);
            this.tools[name].start();
            return;
        }

        console.log('START_TOOL', name);

        this.tempTools.reverse().forEach(t => this.tools[t].stop());
        this.tempTools = [];

        let currTool = this.store.getValue('activeTool');
        if (currTool) {
            this.tools[currTool].stop();
        }

        this.tools[name].start();
        this.store.update({activeTool: name});
    }

    stopTool(name: string) {
        let matches = (s) => (
            name[name.length - 1] === '*'
                ? s.indexOf(name.slice(0, -1)) === 0
                : s === name);

        let len = this.tempTools.length;

        if (len && matches(this.tempTools[len - 1])) {
            console.log('STOP_TEMP_TOOL', name, this.tempTools[len - 1]);
            this.map.popInteractions();
            this.tempTools.pop();
            this.tools[name].stop();
            return;
        }

        let currTool = this.store.getValue('activeTool', 'DefaultTool');
        if (matches(currTool)) {
            console.log('STOP_TOOL', name, currTool);
            this.startTool('DefaultTool', false);
            return;
        }
        console.log('STOP_TOOL_MISMATCH', name, 'curr=', currTool);
    }

    async addTool(name, obj) {
        this.tools[name] = obj;
        await obj.init();
        return obj;
    }

    label(key) {
        let s = this.labels[this.locale][key];
        if (s) {
            return s;
        }
        console.warn('no label for ' + key);
        return key;
    }

    createController(klass, parent, cfg) {
        let obj;

        if (klass.factory) {
            obj = klass.factory(this, cfg || {}, parent);
        } else {
            obj = new klass(this, cfg || {}, parent);
        }

        if (!obj.uid)
            obj.uid = 'uid' + String(++this.uid);
        if (!obj.tag)
            obj.tag = klass.name;

        this.controllers[obj.uid] = obj;
        return obj;
    }

    createControllerFromConfig(parent, cfg) {
        let tag = cfg.tag,
            klass;

        if (typeof tag === 'string') {
            klass = this.tags[tag];
            if (!klass) {
                throw new Error('unknown tag: ' + tag);
            }
        } else {
            klass = tag;
        }

        return this.createController(klass, parent, cfg);
    }

    controller(uid) {
        return this.controllers[uid];
    }

    controllerByTag(tag) {
        for (let [_, c] of tools.entries(this.controllers)) {
            if (c.tag === tag)
                return c;
        }
    }

    fatalError(status) {
        let html = ('<div class="uiError">' + this.label('appFatalError') + '</div>'
            + '<div class="uiErrorLongText">' + this.label('appError' + String(status)) + '</div>'
            + '<a class="uiLink" onclick="window.location.reload()">' + this.label('appErrorTryAgain') + '</a>'
            + ' | '
            + '<a class="uiLink" href="/">' + this.label('appErrorBackHome') + '</a>'
        );
        let div = document.createElement('div');
        div.className = 'appFatalError';
        div.innerHTML = html;
        this.domNode.appendChild(div);
    }

    protected onWindowResize() {
        let
            w = window.innerWidth,
            h = window.innerHeight,
            m = 'xsmall';

        this.cssBreakpoints.forEach(([name, v]) => {
            if (w >= v)
                m = name;
        });

        let up = {
            windowWidth: w,
            windowHeight: h,
            windowSize: w + 'x' + h
        };

        if (this.store.getValue('mediaWidth') !== m)
            up['mediaWidth'] = m;

        this.store.update(up);
        console.log('RESIZE', up);
    }

    protected rootElements(elements: Array<api.ClientProps>) {
        let shared = Object.keys(this.tags)
            .filter(tag => tag.match(/^Shared/))
            .map(tag => ({tag}));

        return shared.concat(elements);
    }

    updateLocation(data) {
        if (!this.isLoaded)
            return;

        let loc = _url2loc(location.href);

        Object.keys(data).forEach(k => {
            if (!data[k])
                delete loc[k];
            else
                loc[k] = data[k];
        });

        let url = _loc2url(loc);

        if (url !== location.href) {
            console.log('history.pushState', url);
            history.pushState({}, '', url);
        }
    }

    protected onPopState() {
        let href = location.href;
        console.log('history.popState', href);
        this.store.update({'appLocation': _url2loc(href)})
    }
}

function _url2loc(url) {

    // location = href/@x,y,scale[,rotation?][group]*
    // group = ;symbol data

    let m = url.match(/^(.+?)\/@(.+)/);
    if (!m)
        return {
            base: url
        };

    let loc = {
        base: m[1]
    };

    let h = m[2].split(';');

    loc['map'] = h[0];
    h.slice(1).forEach(s => {
        let m = s.match(/^(\w+)(.*)$/)
        if (m) {
            loc[m[1]] = m[2].trim();
        }
    });

    return loc;
}

function _loc2url(loc) {
    let hs = [];

    if (loc['map'])
        hs.push(loc['map']);

    Object.keys(loc).sort().forEach(k => {
        if (k !== 'map' && k !== 'base')
            hs.push(k + loc[k])
    });

    let h = hs.join(';');
    return loc['base'] + (h ? '/@' + h : '');
}


